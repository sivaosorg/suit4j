//file:noinspection SpellCheckingInspection
//file:noinspection VulnerableLibrariesLocal
buildscript {
    repositories {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
    }
    dependencies {
        classpath 'org.yaml:snakeyaml:2.0'
    }
}

plugins {
    // Apply the Java plugin for Java project configuration.
    id 'java'

    // Apply Spring Boot plugin with version 2.6.7 for easier Spring Boot application configuration.
    id 'org.springframework.boot' version '2.6.7' // 2.3.12.RELEASE

    // Apply Spring Dependency Management plugin to manage dependency versions more easily.
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.suit4j' // Set the group identifier for the project.
version = '0.0.1' // Set the version of the project.

//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(8) // Set this to 8, 11, or 17 based on your requirement
//    }
//    // Set target compatibility for Java 8
//    sourceCompatibility = '1.8'
//    targetCompatibility = '1.8'
//}

configurations {
    compileOnly {
        // Extend compileOnly configuration from annotationProcessor.
        extendsFrom annotationProcessor
    }
}

repositories {
    // Define Maven Central repository for fetching dependencies.
    mavenCentral()
}

import org.yaml.snakeyaml.Yaml

class JarConfig {
    boolean enabled
    String source

    JarConfig(Map<String, Object> config) {
        enabled = config['enabled'] ?: false
        source = config['source'] ?: ''
    }
}

class NgConfig {
    String name
    String version
    boolean enabledLink
    List<JarConfig> jars

    @SuppressWarnings('GroovyAssignabilityCheck')
    NgConfig(Map<String, Object> configs) {
        name = configs.containsKey('name') ? configs['name'] : 'bot4j'
        version = configs.containsKey('version') ? configs['version'] : 'v0.0.0'
        enabledLink = configs.containsKey('enabled_link') ? configs['enabled_link'] : false
        // jars = configs.containsKey('jars') ? configs['jars'] : [] // List<String> jars
        jars = configs.containsKey('jars') ? configs['jars'].collect { new JarConfig(it) } : []
    }
}

// Define ngConfig as a static global variable
NgConfig ngConfig = loadNgConfig()

NgConfig loadNgConfig() {
    def configs = file('gradle.yml')
    if (configs.exists()) {
        def yaml = new Yaml()
        def config = yaml.load(new FileInputStream(configs))
        println '‚åõ Loading NgConfigs configuration via gradle.yml'
        return new NgConfig(config['ng'] as Map<String, Object>)
    } else {
        println '‚ö†Ô∏è gradle.yml not found, using default configuration'
        return new NgConfig(new HashMap<String, Object>())
    }
}

bootJar {
    archivesBaseName = "${ngConfig.getName()}"
    version = "${ngConfig.getVersion()}"

    // Handle duplicates
    // duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // Compressing the external JAR files listed in gradle.yml using zipTree if enabled_link is true
    if (ngConfig.isEnabledLink() && !ngConfig.getJars().isEmpty()) {
        ngConfig.getJars().each { jar ->
            if (jar.isEnabled() && !jar.getSource().isEmpty()) {
                println("üì¶ Jar compressing... [${jar.getSource()}]")
                from {
                    zipTree(file(jar.getSource()))
                }
            }
        }
    } else {
        println '‚ö†Ô∏è Skipping compression of dependency JAR files...'
    }
}

dependencies {
    // Add the dependencies listed in the gradle.yml file
    if (!ngConfig.getJars().isEmpty()) {
        ngConfig.getJars().each { jar ->
            if (!jar.getSource().isEmpty()) {
                println("üîÑ Jar mounting... [${jar.getSource()}]")
                implementation files(jar.getSource())
            }
        }
    } else {
        println '‚ö†Ô∏è No JAR files specified in gradle.yml for dependencies.'
    }
    // The 'org.postgresql:postgresql' dependency is declared with 'runtimeOnly' scope,
    // indicating that it is required only during runtime for specific purposes,
    // such as database connectivity, but not for compilation or testing.
    runtimeOnly 'org.postgresql:postgresql'
    // The 'org.springframework.boot:spring-boot-starter-data-jpa' dependency is declared with 'implementation' scope,
    // indicating that it is required for compiling and running the application.
    // It provides essential components and configurations for working with JPA (Java Persistence API) in a Spring Boot application,
    // facilitating database access and ORM (Object-Relational Mapping) functionality.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // The 'org.springframework.boot:spring-boot-starter-data-rest' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application.
    // It provides Spring Boot starters for building RESTful APIs backed by Spring Data repositories.
    // This allows for easy creation of RESTful endpoints for data manipulation and retrieval, following REST principles.
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // The 'org.springframework.boot:spring-boot-starter-security' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application.
    // It provides Spring Boot starters for integrating security features into the application.
    // This includes authentication, authorization, and other security mechanisms, allowing for the secure development of web applications.
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // The 'org.springframework.boot:spring-boot-starter-web' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application.
    // It provides Spring Boot starters for building web applications with Spring MVC (Model-View-Controller) framework.
    // This includes components for handling HTTP requests and responses, as well as other web-related functionalities,
    // making it easier to develop web applications in Spring Boot.
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // The 'org.springframework.session:spring-session-core' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application.
    // It provides core functionality for managing user sessions in a Spring application.
    // Spring Session enables session management across multiple servlet containers and provides additional features such as session data persistence
    // and sharing across multiple nodes in a distributed environment.
    implementation 'org.springframework.session:spring-session-core'
    // The 'org.springframework.boot:spring-boot-devtools' dependency is declared with 'developmentOnly' scope,
    // indicating that it is required only during development time and should not be included in production builds.
    // Spring Boot DevTools provides a set of tools aimed at improving the development experience,
    // including automatic application restarts, enhanced reload capabilities, and additional debugging support.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // The 'org.springframework.boot:spring-boot-configuration-processor' dependency is declared with 'annotationProcessor' scope,
    // indicating that it is used during the annotation processing phase of compilation.
    // It is typically used in conjunction with Spring Boot configuration classes to generate metadata files and aid in auto-configuration of Spring applications.
    // This processor helps streamline the configuration process and ensure consistency in application setup.
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // The 'org.springframework.boot:spring-boot-starter-test' dependency is declared with 'testImplementation' scope,
    // indicating that it is necessary for compiling and running tests, but should not be included in production builds.
    // It provides a comprehensive set of libraries and tools for testing Spring Boot applications, including JUnit, Spring Test, Mockito, and other testing frameworks.
    // This starter facilitates writing and running tests for Spring Boot applications, ensuring their reliability and correctness.
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Mockito JUnit Jupiter version 3.12.4: This library integrates Mockito with JUnit 5,
    // enabling developers to write unit tests using Mockito's powerful mocking features.
    // It's designed to work specifically with the JUnit 5 platform, allowing for advanced testing capabilities.
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.12.4'
    // The 'org.springframework.security:spring-security-test' dependency is declared with 'testImplementation' scope,
    // indicating that it is necessary for compiling and running tests, but should not be included in production builds.
    // It provides utilities and tools for testing Spring Security configurations and features.
    // This includes support for testing authentication, authorization, and other security-related aspects of Spring applications,
    // ensuring their robustness and correctness in various security scenarios.
    testImplementation 'org.springframework.security:spring-security-test'
    // The 'org.junit.platform:junit-platform-launcher' dependency is declared with 'testRuntimeOnly' scope,
    // indicating that it is required only during the execution of tests, but not for compiling them.
    // It provides the launcher for executing JUnit 5 tests on the JUnit Platform, allowing for the discovery and execution of tests written using JUnit 5.
    // This launcher is necessary for running JUnit tests within the testing environment.
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // The 'net.logstash.logback:logstash-logback-encoder' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application. It provides the Logstash encoder for Logback,
    // enabling the logging of events in a format compatible with Logstash.
    // This encoder allows for structured logging, which is particularly useful for centralized log management and analysis in distributed systems.
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.0.1'
    // The 'ch.qos.logback.contrib:logback-jackson' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application.
    // It provides the Jackson-based JSON layout for Logback, allowing for JSON-formatted logging output.
    // This layout is useful for compatibility with JSON-based log analysis tools and services, enabling structured logging in Logback-based applications
    implementation group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'
    // The 'ch.qos.logback.contrib:logback-json-classic' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application.
    // It provides the classic JSON layout for Logback, allowing for JSON-formatted logging output.
    // This layout is useful for compatibility with JSON-based log analysis tools and services, enabling structured logging in Logback-based applications in a classic JSON format.
    implementation group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    // The 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml' dependency is declared with 'implementation' scope,
    // indicating that it is necessary for compiling and running the application. It provides support for reading and writing YAML (YAML Ain't Markup Language) data using the Jackson library.
    // This data format is useful for configuration files and other structured data that benefit from human readability and easy serialization.
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.3'
    // Add dependencies for JAXB, activation, and Jackson libraries
    // JAXB is commonly used for marshalling and unmarshalling XML data in Java applications.
    // If your project deals with XML data and you need to convert Java objects to XML (marshalling) or vice versa (unmarshalling), then JAXB may be necessary.
    implementation('javax.xml.bind:jaxb-api:2.3.0')
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.17.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.0'
    // The activation library provides support for the JavaBeans Activation Framework, which is used to determine the type of an arbitrary piece of data,
    // encapsulate access to it, discover the operations available on it, and to instantiate the appropriate bean to perform those operations.
    // It's typically used in JavaMail API and other contexts where dynamic loading of data types is required.
    implementation('javax.activation:activation:1.1')
    // Jackson is a popular JSON library for Java, used for parsing JSON data into Java objects and vice versa.
    // If your project deals with JSON data, then Jackson can be very useful for serialization and deserialization.
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.17.0'
    // The "unirest-java" library, version 3.13.10, provides streamlined HTTP communication capabilities for Java applications, simplifying API interactions and network requests.
    implementation group: 'com.konghq', name: 'unirest-java', version: '3.13.10'
    // The "spring-boot-configuration-processor" library, version 2.7.18,
    // is a Spring Boot module that processes configuration metadata annotations to generate metadata files and aid in auto-configuration of Spring applications.
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.7.18'
    // Hibernate Core is the core framework that provides Object-Relational Mapping (ORM) support
    // for Java applications. It enables the mapping of Java classes to database tables and handles
    // data persistence, retrieval, and transactions seamlessly.
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.6.15.Final'
    // Hibernate Validator is the reference implementation of the Bean Validation API (JSR 380).
    // It provides a robust framework for defining and enforcing validation constraints on Java
    // objects, ensuring that they meet specific criteria before being persisted or used.
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: '7.0.0.Alpha1'
    // javax.persistence-api is the Java Persistence API (JPA) which defines the standard
    // for object-relational mapping in Java. It provides a set of APIs and annotations to manage
    // relational data in Java applications, facilitating the development of data-driven applications.
    implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
    // The "spring-tx" library, version 5.3.25, provides comprehensive support for transaction management
    // in Spring applications. It allows developers to manage transactions declarative or programmatically,
    // ensuring data consistency and integrity across various transactional operations.
    implementation 'org.springframework:spring-tx:5.3.25'
    // The "spring-data-redis" library, version 2.7.8, is a Spring Data module that provides easy configuration and access to Redis from Spring applications,
    // offering comprehensive support for Redis operations, including connection management, RedisTemplate, and repository support for Spring Data.
    implementation group: 'org.springframework.data', name: 'spring-data-redis', version: '2.7.8'
    // The "spring-integration-redis" library, version 5.5.20, is a Spring Integration module that provides support for Redis-based messaging,
    // enabling integration with Redis to send and receive messages, as well as leveraging Redis Pub/Sub capabilities within Spring applications.
    // Using runtimeOnly to ensure this dependency is only included at runtime.
    runtimeOnly group: 'org.springframework.integration', name: 'spring-integration-redis', version: '5.5.20'
    // The "lettuce-core" library, version 6.2.3.RELEASE, is a powerful and thread-safe Redis client for Java,
    // providing asynchronous, synchronous, and reactive API support to efficiently interact with Redis servers.
    implementation group: 'io.lettuce', name: 'lettuce-core', version: '6.2.3.RELEASE'
    // The "jedis" library, version 5.1.3, is a simple and feature-rich Java client for Redis,
    // providing synchronous and asynchronous communication with Redis servers to perform various operations and transactions.
    implementation group: 'redis.clients', name: 'jedis', version: '5.1.3'
    // The "spring-boot-starter-amqp" library, version 2.7.18, is a Spring Boot starter module that simplifies the integration of AMQP (Advanced Message Queuing Protocol) messaging with Spring applications.
    // It provides essential dependencies and configurations for working with messaging systems like RabbitMQ, enabling developers to build robust and scalable message-driven applications with minimal setup.
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-amqp', version: '2.7.18'
}

tasks.named('test') {
    useJUnitPlatform()
}
